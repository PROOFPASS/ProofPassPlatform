version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: proofpass-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-proofpass}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-proofpass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-proofpass}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proofpass-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: proofpass-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proofpass-network

  # ProofPass API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proofpass-api
    restart: always
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${POSTGRES_DB:-proofpass}
      DATABASE_USER: ${POSTGRES_USER:-proofpass}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      API_KEY_SALT: ${API_KEY_SALT}
      STELLAR_NETWORK: ${STELLAR_NETWORK:-testnet}
      STELLAR_SECRET_KEY: ${STELLAR_SECRET_KEY:-}
      STELLAR_PUBLIC_KEY: ${STELLAR_PUBLIC_KEY:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      PUBLIC_URL: ${PUBLIC_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - proofpass-network

  # Nginx Reverse Proxy (optional, for SSL)
  nginx:
    image: nginx:alpine
    container_name: proofpass-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - proofpass-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  proofpass-network:
    driver: bridge
